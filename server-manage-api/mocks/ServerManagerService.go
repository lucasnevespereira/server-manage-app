// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "server-manage-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ServerManagerService is an autogenerated mock type for the ServerManagerService type
type ServerManagerService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, request
func (_m *ServerManagerService) Create(ctx context.Context, request models.CreateServerRequest) (*models.Server, error) {
	ret := _m.Called(ctx, request)

	var r0 *models.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateServerRequest) (*models.Server, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateServerRequest) *models.Server); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateServerRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *ServerManagerService) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ServerManagerService) GetByID(ctx context.Context, id string) (*models.Server, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Server, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Server); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *ServerManagerService) List(ctx context.Context) ([]*models.Server, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Server, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Server); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerManagerService creates a new instance of ServerManagerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerManagerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerManagerService {
	mock := &ServerManagerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
