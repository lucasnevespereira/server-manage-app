// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	repository "server-manage-api/internal/repository"

	mock "github.com/stretchr/testify/mock"
)

// ServerRepository is an autogenerated mock type for the ServerRepository type
type ServerRepository struct {
	mock.Mock
}

// AutoMigrate provides a mock function with given fields:
func (_m *ServerRepository) AutoMigrate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, rowServer
func (_m *ServerRepository) Create(ctx context.Context, rowServer *repository.RowServer) (*repository.RowServer, error) {
	ret := _m.Called(ctx, rowServer)

	var r0 *repository.RowServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowServer) (*repository.RowServer, error)); ok {
		return rf(ctx, rowServer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repository.RowServer) *repository.RowServer); ok {
		r0 = rf(ctx, rowServer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RowServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repository.RowServer) error); ok {
		r1 = rf(ctx, rowServer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *ServerRepository) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ServerRepository) GetByID(ctx context.Context, id string) (*repository.RowServer, error) {
	ret := _m.Called(ctx, id)

	var r0 *repository.RowServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*repository.RowServer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *repository.RowServer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.RowServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *ServerRepository) List(ctx context.Context) ([]*repository.RowServer, error) {
	ret := _m.Called(ctx)

	var r0 []*repository.RowServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*repository.RowServer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*repository.RowServer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.RowServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerRepository creates a new instance of ServerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerRepository {
	mock := &ServerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
